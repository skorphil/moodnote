---
import { useTranslations, getLangFromUrl } from "../lib/translate";
import { Emotion, Translations } from "../types";

interface Props {
  name: Emotion;
  bg?: boolean;
  scaleLength?: number;
}

const { name, bg, scaleLength = 4 } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const scaleTranslations = {
  0: t("scale.0"),
  1: t("scale.1"),
  2: t("scale.2"),
  3: t("scale.3"),
  4: t("scale.4"),
};
---

<script>
  import("@shoelace-style/shoelace/dist/components/range/range.js");
  import("@shoelace-style/shoelace/dist/components/button/button.js");
  import("@shoelace-style/shoelace/dist/components/radio/radio.js");
  import("@shoelace-style/shoelace/dist/components/radio-group/radio-group.js");

  class EmotionItem extends HTMLElement {
    constructor() {
      super();
      const scalesTranslation = this.dataset.scales
        ? JSON.parse(this.dataset.scales)
        : null;
      const button = this.querySelector(`sl-radio-group`);
      const scale = this.querySelector(".value-label");

      button?.addEventListener("click", () => {
        const val = button.value;
        scalesTranslation && scale
          ? (scale.textContent = scalesTranslation[val])
          : false;
        scale?.classList.add("warning-text");
      });
    }
  }
  customElements.define("emotion-item", EmotionItem);
</script>

<emotion-item data-scales={JSON.stringify(scaleTranslations)}>
  <div>
    <span class="full-width item-name">{t(`emotion.${name}`)}</span>
  </div>
  <div class="flex full-width">
    <span class="value-label" id="scale">{t("scale.null")}</span>
    <sl-radio-group required class="group full-width" id={name} name={name}>
      {
        Array.from({ length: scaleLength + 1 }, (_, i) => (
          <sl-radio value={i} />
        ))
      }
    </sl-radio-group>
  </div>
</emotion-item>

<style>
  sl-radio::part(label) {
    display: none;
  }

  span.warning-text {
    color: var(--sl-color-grey-900);
  }

  .flex {
    display: flex;
    flex-direction: row;
    gap: 8px;
  }

  sl-radio::part(control) {
    border-color: var(--sl-color-neutral-600);
  }

  .group {
  }

  .group::part(form-control) {
    width: 100%;
  }

  .group::part(form-control-input) {
    flex-direction: row;
    display: flex;
    gap: 4px;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }

  .full-width {
    width: 100%;
  }
  .centered {
    display: flex;
    justify-content: center;
  }
  .value-label {
    font-size: 16px;
    width: 100px;
    flex-shrink: 0;
    margin-right: 24px;
    color: var(--sl-color-gray-600);
  }

  .item-name {
    font-size: 18px;
    font-weight: normal;
  }

  sl-range {
    touch-action: none;
    /* padding-right:80px; */
    --track-color-active: var(--sl-color-gray-300);
    --track-color-inactive: var(--sl-color-gray-100);
  }

  sl-radio {
    display: inline;
  }
</style>
